/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       false;

geometry
{
    cylinder
    {
        type triSurfaceMesh;
        file    "cylinder.stl";
    }
};

castellatedMeshControls
{
   // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 7000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 10;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        //{
        //    file "someLine.eMesh";
        //    level 2;
        //}
    );

    resolveFeatureAngle 60;
    allowFreeStandingZoneFaces true;

    refinementSurfaces
    {
        cylinder
        {
            level (2 3);
        }
    }

    refinementRegions
    {
    }

    locationInMesh (0.001 1.001 0.01); // Offset from (0 0 0) to avoid
                           // coinciding with face or edge
}

snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 4.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;
}

addLayersControls
{
    layers
    {
        "cylinder.*"
        {
            nSurfaceLayers 2;
        }
    }

    relativeSizes       true; // false, usually with firstLayerThickness
    expansionRatio      1.0;
    finalLayerThickness 0.5;
    minThickness        1e-3;
    featureAngle         30;
    nGrow                 0;
    maxFaceThicknessRatio 0.5;
    maxThicknessToMedialRatio 0.3;
    nBufferCellsNoExtrude  0;
    nLayerIter            50;
//  firstLayerThickness 0.01;

//  maxThicknessToMedialRatio 0.6;
}

meshQualityControls
{
    #include "meshQualityDict"
}

mergeTolerance 1e-6;

// ************************************************************************* //
